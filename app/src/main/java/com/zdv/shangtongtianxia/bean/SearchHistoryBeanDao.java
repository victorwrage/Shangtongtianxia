package com.zdv.shangtongtianxia.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_HISTORY_BEAN".
*/
public class SearchHistoryBeanDao extends AbstractDao<SearchHistoryBean, Long> {

    public static final String TABLENAME = "SEARCH_HISTORY_BEAN";

    /**
     * Properties of entity SearchHistoryBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Ids = new Property(0, Long.class, "ids", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Idx = new Property(2, int.class, "idx", false, "IDX");
        public final static Property Key_word = new Property(3, String.class, "key_word", false, "KEY_WORD");
        public final static Property Createtime = new Property(4, long.class, "createtime", false, "CREATETIME");
        public final static Property Key_type = new Property(5, String.class, "key_type", false, "KEY_TYPE");
    }


    public SearchHistoryBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistoryBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_HISTORY_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ids
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"IDX\" INTEGER NOT NULL ," + // 2: idx
                "\"KEY_WORD\" TEXT," + // 3: key_word
                "\"CREATETIME\" INTEGER NOT NULL ," + // 4: createtime
                "\"KEY_TYPE\" TEXT);"); // 5: key_type
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_SEARCH_HISTORY_BEAN__id_CREATETIME_DESC ON \"SEARCH_HISTORY_BEAN\"" +
                " (\"_id\" ASC,\"CREATETIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_HISTORY_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SearchHistoryBean entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getIdx());
 
        String key_word = entity.getKey_word();
        if (key_word != null) {
            stmt.bindString(4, key_word);
        }
        stmt.bindLong(5, entity.getCreatetime());
 
        String key_type = entity.getKey_type();
        if (key_type != null) {
            stmt.bindString(6, key_type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SearchHistoryBean entity) {
        stmt.clearBindings();
 
        Long ids = entity.getIds();
        if (ids != null) {
            stmt.bindLong(1, ids);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getIdx());
 
        String key_word = entity.getKey_word();
        if (key_word != null) {
            stmt.bindString(4, key_word);
        }
        stmt.bindLong(5, entity.getCreatetime());
 
        String key_type = entity.getKey_type();
        if (key_type != null) {
            stmt.bindString(6, key_type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SearchHistoryBean readEntity(Cursor cursor, int offset) {
        SearchHistoryBean entity = new SearchHistoryBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ids
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2), // idx
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // key_word
            cursor.getLong(offset + 4), // createtime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // key_type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SearchHistoryBean entity, int offset) {
        entity.setIds(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setIdx(cursor.getInt(offset + 2));
        entity.setKey_word(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatetime(cursor.getLong(offset + 4));
        entity.setKey_type(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SearchHistoryBean entity, long rowId) {
        entity.setIds(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SearchHistoryBean entity) {
        if(entity != null) {
            return entity.getIds();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SearchHistoryBean entity) {
        return entity.getIds() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
