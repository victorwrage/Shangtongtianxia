package com.zdv.shangtongtianxia.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_BEAN".
*/
public class MessageBeanDao extends AbstractDao<MessageBean, Long> {

    public static final String TABLENAME = "MESSAGE_BEAN";

    /**
     * Properties of entity MessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Idx = new Property(1, Long.class, "idx", true, "_id");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property View = new Property(3, String.class, "view", false, "VIEW");
        public final static Property Address = new Property(4, String.class, "address", false, "ADDRESS");
        public final static Property Img = new Property(5, String.class, "img", false, "IMG");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Details = new Property(7, String.class, "details", false, "DETAILS");
        public final static Property Status = new Property(8, String.class, "status", false, "STATUS");
        public final static Property Url = new Property(9, String.class, "url", false, "URL");
        public final static Property Createtime = new Property(10, String.class, "createtime", false, "CREATETIME");
        public final static Property Starttime = new Property(11, String.class, "starttime", false, "STARTTIME");
        public final static Property Stoptime = new Property(12, String.class, "stoptime", false, "STOPTIME");
        public final static Property Operator = new Property(13, String.class, "operator", false, "OPERATOR");
        public final static Property Company_id = new Property(14, String.class, "company_id", false, "COMPANY_ID");
        public final static Property Is_read = new Property(15, Boolean.class, "is_read", false, "IS_READ");
    }


    public MessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_BEAN\" (" + //
                "\"ID\" TEXT," + // 0: id
                "\"_id\" INTEGER PRIMARY KEY ," + // 1: idx
                "\"TYPE\" TEXT," + // 2: type
                "\"VIEW\" TEXT," + // 3: view
                "\"ADDRESS\" TEXT," + // 4: address
                "\"IMG\" TEXT," + // 5: img
                "\"TITLE\" TEXT," + // 6: title
                "\"DETAILS\" TEXT," + // 7: details
                "\"STATUS\" TEXT," + // 8: status
                "\"URL\" TEXT," + // 9: url
                "\"CREATETIME\" TEXT," + // 10: createtime
                "\"STARTTIME\" TEXT," + // 11: starttime
                "\"STOPTIME\" TEXT," + // 12: stoptime
                "\"OPERATOR\" TEXT," + // 13: operator
                "\"COMPANY_ID\" TEXT," + // 14: company_id
                "\"IS_READ\" INTEGER);"); // 15: is_read
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MESSAGE_BEAN__id_CREATETIME_DESC ON \"MESSAGE_BEAN\"" +
                " (\"_id\" ASC,\"CREATETIME\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(2, idx);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String view = entity.getView();
        if (view != null) {
            stmt.bindString(4, view);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(8, details);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(10, url);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(11, createtime);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(12, starttime);
        }
 
        String stoptime = entity.getStoptime();
        if (stoptime != null) {
            stmt.bindString(13, stoptime);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(14, operator);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(15, company_id);
        }
 
        Boolean is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindLong(16, is_read ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        Long idx = entity.getIdx();
        if (idx != null) {
            stmt.bindLong(2, idx);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        String view = entity.getView();
        if (view != null) {
            stmt.bindString(4, view);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(5, address);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(6, img);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String details = entity.getDetails();
        if (details != null) {
            stmt.bindString(8, details);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(9, status);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(10, url);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(11, createtime);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(12, starttime);
        }
 
        String stoptime = entity.getStoptime();
        if (stoptime != null) {
            stmt.bindString(13, stoptime);
        }
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(14, operator);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(15, company_id);
        }
 
        Boolean is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindLong(16, is_read ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public MessageBean readEntity(Cursor cursor, int offset) {
        MessageBean entity = new MessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idx
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // view
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // address
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // details
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // url
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createtime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // starttime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // stoptime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // operator
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // company_id
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // is_read
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIdx(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setView(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDetails(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatetime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStarttime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStoptime(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOperator(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCompany_id(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIs_read(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageBean entity, long rowId) {
        entity.setIdx(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageBean entity) {
        if(entity != null) {
            return entity.getIdx();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBean entity) {
        return entity.getIdx() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
